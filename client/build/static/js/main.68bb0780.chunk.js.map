{"version":3,"sources":["components/common/thermometer.jpg","utils/setAuthToken.js","store/actions/authAction.js","store/actions/types.js","components/common/Notification.js","store/actions/notifAction.js","components/common/Navbar.js","components/auth/Logo.js","components/auth/Login.js","components/auth/Register.js","components/files/Browser.js","components/validators/PrivateRoute.js","components/graph/LineChart_zoom.js","components/files/Details.js","components/common/AlertList.js","config.js","App.js","serviceWorker.js","validations/isEmpty.js","store/reducer/authReducer.js","store/reducer/notifReducer.js","store/reducer/rootReducer.js","index.js"],"names":["module","exports","setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","type","payload","logOutUser","dispatch","localStorage","removeItem","connect","state","message","notification","status","clearNotification","props","useState","alert","setAlert","clear","openNotificationWithIcon","toUpperCase","description","onClose","duration","useEffect","Text","withRouter","isAuthenticated","auth","mode","Item","key","to","src","logo","style","alt","strong","float","onClick","history","push","Logo","Title","Content","loginUser","loginDetails","userData","post","then","res","data","setItem","jwt_decoded","catch","err","response","create","getFieldDecorator","form","className","onSubmit","e","preventDefault","validateFields","rules","required","prefix","color","placeholder","htmlType","registerUser","newUser","Browser","items","setItems","search","setSearch","get","console","log","filteredItems","filter","item","toLowerCase","indexOf","onChange","target","value","bordered","dataSource","renderItem","mark","split","Component","component","rest","render","setNotification","setValue","setState","fileName","name","rec","lastDrawLocation","setLastDrawLocation","length","overflow","animation","xType","xDomain","left","right","yDomain","bottom","top","width","height","onValueMouseOver","_rememberValue","onValueMouseOut","onBrushEnd","area","onDrag","size","margin","icon","uploadFile","match","params","id","messages","setMessages","reverse","socketIOClient","on","msg","content","map","c","_id","banner","showIcon","onVisibleChange","_","visible","idArray","forEach","replace","read","title","count","shape","initialVerfication","jwtToken","currentTime","Date","now","exp","path","Login","Register","exact","Details","Boolean","window","location","hostname","isEmpty","undefined","Object","keys","trim","initialState","user","authReducer","action","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,yC,4VCU5BC,EARM,SAAAC,GACbA,EACAC,IAAMC,SAASC,QAAQC,OAAvB,cAAiDJ,SAE1CC,IAAMC,SAASC,QAAQC,OAAvB,e,QCwCFC,EAAiB,SAAAC,GAC1B,MAAO,CACHC,KChDwB,mBDiDxBC,QAASF,IAMJG,EAAa,kBAAM,SAAAC,GAE5BC,aAAaC,WAAW,YAExBb,GAAa,GAEbW,EAASL,EAAe,O,4EEMbQ,eAbS,SAAAC,GACpB,MAAO,CACHC,QAASD,EAAME,aAAaD,QAC5BE,OAAQH,EAAME,aAAaC,WAIR,SAAAP,GACvB,MAAO,CACHQ,kBAAmB,kBAAMR,ECrDtB,CACHH,KFT0B,2BCiEnBM,EA9DM,SAAAM,GAAU,IAAD,EAEAC,mBAAS,CAC/BL,QAAS,KACTE,OAAQ,OAJc,mBAEnBI,EAFmB,KAEZC,EAFY,KAOpBC,EAAQ,WACVD,EAAS,CACLP,QAAS,KACTE,OAAQ,OAEZE,EAAMD,qBAGJM,EAA2B,SAAAjB,GAC7BS,EAAA,EAAaT,GAAM,CACfQ,QAASR,EAAKkB,cACdC,YAAaL,EAAMN,QACnBY,QAASJ,EACTK,SAAU,KAwBlB,OAnBAC,qBAAU,WACNP,EAAS,CACLP,QAASI,EAAMJ,QACfE,OAAQE,EAAMF,WAEnB,CAACE,IAGJU,qBAAU,WACFR,EAAMN,UACe,MAAjBM,EAAMJ,OACNO,EAAyB,WAEzBA,EAAyB,YAIlC,CAACH,IAGA,iC,kBEzCAS,G,WAAAA,MA4COC,cAAWlB,aAZF,SAAAC,GACpB,MAAO,CACHkB,gBAAiBlB,EAAMmB,KAAKD,oBAIT,SAAAtB,GACvB,MAAO,CACHD,WAAY,kBAAMC,EAASD,SAITI,EA3CX,SAAAM,GAMX,OACI,6BAEQA,EAAMa,gBAAmB,uBAAME,KAAK,cAChC,sBAAMC,KAAN,CAAWC,IAAI,SACX,kBAAC,IAAD,CAAMC,GAAG,KACL,yBAAKC,IAAKC,IAAMC,MAAO,CAAE,MAAS,OAAQ,OAAU,QAAUC,IAAI,SAClE,kBAACX,EAAD,CAAMY,QAAM,GAAZ,gBAKR,sBAAMP,KAAN,CAAWC,IAAI,SAASI,MAAO,CAAEG,MAAO,SAAWC,QAhBlD,WACbzB,EAAMV,aACNU,EAAM0B,QAAQC,KAAK,YAeH,uBAAMvC,KAAK,WADf,WAIQ,KAGhB,kBAAC,EAAD,W,kECrBGwC,G,OATF,WACT,OACI,6BACI,yBAAKT,IAAKC,IAAMC,MAAO,CAAE,MAAS,OAAQ,OAAU,QAAUC,IAAI,SAClE,6BAAK,sBAAYO,MAAZ,uBCATC,E,IAAAA,QA6EOpC,eAPS,SAAAC,GACpB,MAAO,CACHkB,gBAAiBlB,EAAMmB,KAAKD,oBART,SAACtB,GACxB,MAAO,CACHwC,UAAW,SAACC,GAAD,OAAkBzC,GNrDZ0C,EMqD+BD,ENrDnB,SAAAzC,GACjCT,IAAMoD,KAAK,mBAAoBD,GAC1BE,MAAK,SAAAC,GAAO,IAEDvD,EAAUuD,EAAIC,KAAdxD,MAERW,aAAa8C,QAAQ,WAAYzD,GACjCD,EAAaC,GAEb,IAAMM,EAAUoD,IAAY1D,GAE5BU,EAASL,EAAeC,OAG3BqD,OAAM,SAAAC,GACHlD,EAAS,CACLH,KCrCgB,mBDsChBC,QAASoD,EAAIC,iBAjBJ,IAAAT,MMgEVvC,CAA6C,IAAKiD,QAAL,EA5E9C,SAAA3C,GACVU,qBAAU,WACFV,EAAMa,iBACNb,EAAM0B,QAAQC,KAAK,OAExB,CAAC3B,IACJ,IAQQ4C,EAAsB5C,EAAM6C,KAA5BD,kBACR,OACI,kBAACd,EAAD,KACI,yBAAKgB,UAAU,QACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,gBACX,uBAAMC,SAfG,SAAAC,GACjBA,EAAEC,iBACFjD,EAAM6C,KAAKK,gBAAe,SAACT,EAAKT,GACvBS,GACDzC,EAAM+B,UAAUC,OAWcc,UAAU,cACpC,sBAAM9B,KAAN,KACK4B,EAAkB,QAAS,CACxBO,MAAO,CACH,CACIC,UAAU,EACVxD,QAAS,8BAJpBgD,CAOG,uBACIS,OAAQ,uBAAMjE,KAAK,OAAOiC,MAAO,CAAEiC,MAAO,qBAC1CC,YAAY,YAGxB,sBAAMvC,KAAN,KACK4B,EAAkB,WAAY,CAC3BO,MAAO,CAAC,CAAEC,UAAU,EAAMxD,QAAS,iCADtCgD,CAGG,uBACIS,OAAQ,uBAAMjE,KAAK,OAAOiC,MAAO,CAAEiC,MAAO,qBAC1ClE,KAAK,WACLmE,YAAY,eAIxB,sBAAMvC,KAAN,KACI,6BACI,uBAAQ5B,KAAK,UAAUoE,SAAS,SAASV,UAAU,qBAAnD,WAFR,MAMO,kBAAC,IAAD,CAAMA,UAAU,WAAW5B,GAAG,aAA9B,wBCtDnBY,E,IAAAA,QA4GOlB,cAAWlB,aANF,SAAAC,GACpB,MAAO,CACHkB,gBAAiBlB,EAAMmB,KAAKD,oBART,SAAAtB,GACvB,MAAO,CACHkE,aAAc,SAACC,EAAShC,GAAV,OAAsBnC,EPnGhB,SAAC8C,EAAMX,GAAP,OAAmB,SAAAnC,GAC3CT,IACKoD,KAAK,sBAAuBG,GAE5BF,MAAK,SAAAC,GAAG,OAAIV,EAAQC,KAAK,aAEzBa,OAAM,SAAAC,GACHlD,EAAS,CACLH,KCdgB,mBDehBC,QAASoD,EAAIC,eO0FwBe,CAAaC,EAAShC,QAUjDhC,CAA6C,IAAKiD,QAAL,EA1GtD,SAAA3C,GAEbU,qBAAU,WACFV,EAAMa,iBACNb,EAAM0B,QAAQC,KAAK,OAExB,CAAC3B,IAEJ,IAQQ4C,EAAsB5C,EAAM6C,KAA5BD,kBACR,OACI,kBAAC,EAAD,KACI,yBAAKE,UAAU,QACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,gBACX,uBAAMC,SAfG,SAAAC,GACjBA,EAAEC,iBACFjD,EAAM6C,KAAKK,gBAAe,SAACT,EAAKiB,GACvBjB,GACDzC,EAAMyD,aAAaC,EAAS1D,EAAM0B,aAWJoB,UAAU,iBACpC,sBAAM9B,KAAN,KACK4B,EAAkB,OAAQ,CACvBO,MAAO,CACH,CACIC,UAAU,EACVxD,QAAS,6BAJpBgD,CAOG,uBACIS,OAAQ,uBAAMjE,KAAK,OAAOiC,MAAO,CAAEiC,MAAO,qBAC1CC,YAAY,WAGxB,sBAAMvC,KAAN,KACK4B,EAAkB,QAAS,CACxBO,MAAO,CACH,CACIC,UAAU,EACVxD,QAAS,8BAJpBgD,CAOG,uBACIS,OAAQ,uBAAMjE,KAAK,OAAOiC,MAAO,CAAEiC,MAAO,qBAC1CC,YAAY,YAGxB,sBAAMvC,KAAN,KACK4B,EAAkB,WAAY,CAC3BO,MAAO,CACH,CACIC,UAAU,EACVxD,QAAS,iCAJpBgD,CAQG,uBACIS,OAAQ,uBAAMjE,KAAK,OAAOiC,MAAO,CAAEiC,MAAO,qBAC1ClE,KAAK,WACLmE,YAAY,eAGxB,sBAAMvC,KAAN,KACK4B,EAAkB,YAAa,CAC5BO,MAAO,CAAC,CACJC,UAAU,EACVxD,QAAS,mCAHhBgD,CAMG,uBACIS,OAAQ,uBAAMjE,KAAK,OAAOiC,MAAO,CAAEiC,MAAO,qBAC1ClE,KAAK,WACLmE,YAAY,uBAGxB,sBAAMvC,KAAN,KACI,6BACI,uBAAQ5B,KAAK,UAAUoE,SAAS,SAASV,UAAU,wBAAnD,aAFR,4BAM6B,kBAAC,IAAD,CAAMA,UAAU,WAAW5B,GAAG,UAA9B,mB,kBCjDlCyC,G,OAtCC,WAAO,IAAD,EACQ1D,mBAAS,IADjB,mBACX2D,EADW,KACJC,EADI,OAEU5D,mBAAS,IAFnB,mBAEX6D,EAFW,KAEHC,EAFG,KAGlBrD,qBAAU,WACN5B,IAAMkF,IAAI,iBACL7B,MAAK,SAAAC,GACFyB,EAASzB,EAAIC,SAEhBG,OAAM,SAAAC,GACHwB,QAAQC,IAAIzB,QAErB,IACH,IAAI0B,EAAgBP,EAAMQ,QAAO,SAAAC,GAC7B,OAA+C,IAAxCA,EAAKC,cAAcC,QAAQT,MAEtC,OAEI,6BACI,6BACI,uBAAO1E,KAAK,OAAOmE,YAAY,YAAYiB,SAAU,SAACxB,GAAD,OAAOe,EAAUf,EAAEyB,OAAOC,MAAMJ,mBAEzF,yBAAKxB,UAAU,aACX,uBACI6B,UAAQ,EACRC,WAAYT,EACZU,WAAY,SAAAR,GAAI,OACZ,kBAAC,IAAD,CAAMnD,GAAE,kBAAamD,IACjB,sBAAMrD,KAAN,KACI,sBAAYL,KAAZ,CAAiBmE,MAAI,GAAET,EAAKU,MAAM,KAAK,GAAGzE,eAD9C,IACgF+D,W,SCb7F3E,eALS,SAAAC,GAAK,MAAK,CAC9BmB,KAAMnB,EAAMmB,QAIDpB,EAjBM,SAAC,GAAD,IAAcsF,EAAd,EAAGC,UAAsBnE,EAAzB,EAAyBA,KAASoE,EAAlC,2CACjB,kBAAC,IAAD,iBACQA,EADR,CAEIC,OAAQ,SAAAnF,GAAK,OACgB,IAAzBc,EAAKD,gBACD,kBAACmE,EAAchF,GAEX,kBAAC,IAAD,CAAUkB,GAAG,kB,mCCoHlBxB,G,OAAAA,YAAQ,MANI,SAAAH,GACvB,MAAO,CACH6F,gBAAiB,SAAC/F,GAAD,OAAaE,EPzH3B,CACHH,KFHwB,mBEIxBC,QOuHuDA,QAIhDK,EA7GQ,SAACM,GAAW,IAAD,EACJC,mBAAS,MADL,mBACvByE,EADuB,KAChBW,EADgB,OAEJpF,mBAAS,IAFL,mBAEvBN,EAFuB,KAEhB2F,EAFgB,KAGtBF,EAA8BpF,EAA9BoF,gBAAiBG,EAAavF,EAAbuF,SACzB7E,qBAAU,WACN5B,IAAMoD,KAAK,gBACP,CAAEsD,KAAMD,IACPpD,MAAK,SAAAsD,GACFH,EAASG,EAAIpD,SAEhBG,OAAM,SAAAC,GACH2C,EAAgB3C,EAAIC,eAE7B,CAAC6C,EAAUH,IAEd,IAf8B,EA+BkBnF,mBAAS,MA/B3B,mBA+BvByF,EA/BuB,KA+BLC,EA/BK,KAgC9B,OACI,6BAEQhG,EAAMiG,OAAS,EACX,6BACI,kBAAC,IAAD,CACIvE,MAAO,CAAEwE,SAAU,UACnBC,WAAS,EACTC,MAAM,OACNC,QACIN,GAAoB,CAChBA,EAAiBO,KACjBP,EAAiBQ,OAGzBC,QACIT,GAAoB,CAChBA,EAAiBU,OACjBV,EAAiBW,KAGzBC,MAAO,KACPC,OAAQ,KACR,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CACIC,iBAAkB,SAACxD,GAAD,OA7CvB,SAAA0B,GACnBW,EAASX,GA4CwC+B,CAAezD,IACxC0D,gBAAiB,WAzCzCrB,EAAS,OA0CehD,KAAM1C,IAEV,kBAAC,IAAD,CACIgH,WAAY,SAAAC,GAAI,OAAIjB,EAAoBiB,IACxCC,OAAQ,SAAAD,GACJjB,EAAoB,CAChBS,OAAQV,EAAiBU,QAAUQ,EAAKP,IAAMO,EAAKR,QACnDH,KAAMP,EAAiBO,MAAQW,EAAKV,MAAQU,EAAKX,MACjDC,MAAOR,EAAiBQ,OAASU,EAAKV,MAAQU,EAAKX,MACnDI,IAAKX,EAAiBW,KAAOO,EAAKP,IAAMO,EAAKR,aAKxD1B,EAAQ,kBAAC,IAAD,CAAMA,MAAOA,IAAY,OAItC,yBAAK5B,UAAU,cACX,uBAAMgE,KAAK,QAAQhE,UAAU,mBAI7C,uBACI1D,KAAK,UACLiC,MAAO,CAAEG,MAAO,OAAQuF,OAAQ,QAChCtF,QAAS,kBAAMkE,EAAoB,QAHvC,cAMA,uBACIvG,KAAK,UACL4H,KAAK,eACL3F,MAAO,CAAEG,MAAO,OAAQuF,OAAQ,QAChCtF,QAAS,kBAxEF,SAAA8D,GACfzG,IAAMoD,KAAK,uBAAwB,CAAEsD,KAAMD,IAAYpD,MACnD,SAAAC,GACIgD,EAAgBhD,MACjBI,OAAM,SAAAC,GACL2C,EAAgB3C,EAAIC,aAmELuE,CAAWjH,EAAMuF,YAJpC,eCxGJzD,G,WAAAA,SAcOlB,eAZC,SAAAZ,GACZ,OACI,6BACI,kBAAC,EAAD,KACI,yBAAK8C,UAAU,oBACX,kBAAC,EAAD,CAAWyC,SAAUvF,EAAMkH,MAAMC,OAAOC,W,mGC8D7C1H,eANS,SAAAC,GACpB,MAAO,CACHkB,gBAAiBlB,EAAMmB,KAAKD,mBAIrBnB,EAlEG,SAACM,GAAW,IAAD,EACOC,mBAAS,IADhB,mBAClBoH,EADkB,KACRC,EADQ,KAGzB5G,qBAAU,WACFV,EAAMa,kBACN/B,IAAMkF,IAAI,eAAe7B,MAAK,SAAAkF,GAC1BC,EAAYD,EAAShF,KAAKkF,cAC3B/E,OAAM,SAAAC,GACLwB,QAAQC,IAAIzB,EAAIC,aAEL8E,ICnBH,yBDoBLC,GAAG,QAAQ,SAAApF,GACdiF,GAAY,SAAAD,GAAQ,OAAKhF,EAAKqF,KAAV,mBAAkBL,aAG/C,CAACrH,IAqBJ,OAAQA,EAAMa,gBACV,uBACIiC,UAAU,UACV6E,QACIN,EAASO,KAAI,SAAAC,GACT,OAAQ,uBAAO5G,IAAK4G,EAAEC,IAAKlI,QAASiI,EAAEjI,QAASR,KAAMyI,EAAE/H,OAAQiI,QAAM,EAACC,UAAQ,OAGtFC,gBAAiBC,YA3BG,SAAAC,GACxB,GAAwB,IAApBd,EAASzB,OAAc,OAAO,KAClC,IAAgB,IAAZuC,EAAmB,CACnB,IAAMC,EAAU,GAChBf,EAASgB,SAAQ,SAAAzI,GACbwI,EAAQzG,KAAK/B,EAAQkI,QAEzBhJ,IAAMoD,KAAK,qBACP,CACIoG,QAAS,CAAEC,MAAM,GACjBH,QAASA,IACVjG,MAAK,WACJmF,EAAY,OACb9E,OAAM,SAAAC,GACLwB,QAAQC,IAAIzB,EAAIC,gBAayB,KACjD8F,MAAO,2CAEP,uBAAOC,MAAOpB,EAASzB,OAAQ9C,UAAU,eACrC,uBAAQA,UAAU,eAAe1D,KAAK,UAAUsJ,MAAM,SAAS5B,KAAK,SAChE,uBAAMhE,UAAU,aAAa1D,KAAK,YAK7C,QEhDHuJ,EAAqB,SAAC3I,GAE1B,GAAIR,aAAaoJ,SAAU,CAEzBhK,EAAaY,aAAaoJ,UAC1B,IAAMzJ,EAAUoD,IAAY/C,aAAaoJ,UAEzC5I,EAAMd,eAAeC,GACrB,IAAM0J,EAAcC,KAAKC,MAAQ,IAE7B5J,EAAQ6J,IAAMH,IAChB7I,EAAMV,aACNU,EAAM0B,QAAQC,KAAK,QA+BzB,IAQejC,eAAQ,MARI,SAAAH,GACzB,MAAO,CACLL,eAAgB,SAAC0J,GAAD,OAAcrJ,EAASL,EAAe0J,KACtDtJ,WAAY,kBAAMC,EAASD,SAKhBI,EAjCf,SAAaM,GAOX,OAJAU,qBAAU,WACRiI,EAAmB3I,KAClB,CAACA,IAGF,kBAAC,IAAD,KACE,yBAAK8C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOmG,KAAK,SAAShE,UAAWiE,IAChC,kBAAC,IAAD,CAAOD,KAAK,YAAYhE,UAAWkE,IACnC,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAcC,OAAK,EAACH,KAAK,IAAIhE,UAAWtB,KAE1C,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAcyF,OAAK,EAACH,KAAK,eAAehE,UAAWoE,KAErD,kBAAC,EAAD,WCxCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvC,MACvB,2D,uBCZSwC,GANC,SAAAhF,GAAK,YACPiF,IAAVjF,GACU,OAAVA,GACkB,kBAAVA,GAAoD,IAA9BkF,OAAOC,KAAKnF,GAAOkB,QAC/B,kBAAVlB,GAA8C,IAAxBA,EAAMoF,OAAOlE,Q,8jBCA/C,IAAMmE,GAAe,CACjBlJ,iBAAiB,EACjBmJ,KAAM,IAgBKC,GAbK,WAAmC,IAAlCtK,EAAiC,uDAAzBoK,GAAcG,EAAW,uCAClD,OAAQA,EAAO9K,MACX,IhBXwB,mBgBYpB,OAAO,GAAP,GACOO,EADP,CAEIkB,iBAAkB6I,GAAQQ,EAAO7K,SACjC2K,KAAME,EAAO7K,UAErB,QACI,OAAOM,IChBboK,GAAe,CACjBnK,QAAS,GACTE,OAAQ,KCKGqK,GALKC,aAAgB,CAChCtJ,KAAMmJ,GACNpK,aDCW,WAAyC,IAA/BF,EAA8B,uDAAtBoK,GAAcG,EAAQ,uCAC3C7K,EAAY6K,EAAZ7K,QACR,OAAQ6K,EAAO9K,MACX,IjBTwB,mBiBUpB,MAAO,CACHQ,QAASP,EAAQgD,KACjBvC,OAAQT,EAAQS,QAExB,IjBb0B,qBiBctB,MAAO,CACHF,QAAS,KACTE,OAAQ,MAEhB,QACI,OAAOH,M,UEXb0K,GAAQC,aACVH,GACAI,aACIC,aAAgBC,MAChBlB,OAAOmB,8BAAgCnB,OAAOmB,iCAItDC,IAASxF,OAAO,kBAAC,IAAD,CAAUkF,MAAOA,IAAO,kBAAC,GAAD,OAAoBO,SAASC,eAAe,SL+G9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7I,MAAK,SAAA8I,GACjCA,EAAaC,kB","file":"static/js/main.68bb0780.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/thermometer.bf9e0b89.jpg\";","import axios from 'axios'\n\nconst setAuthToken = token => {\n    if (token) {\n        axios.defaults.headers.common['Authorization'] = token\n    } else {\n        delete axios.defaults.headers.common['Authorization']\n    }\n}\n\nexport default setAuthToken","import axios from 'axios'\nimport jwt_decoded from 'jwt-decode'\nimport setAuthToken from '../../utils/setAuthToken'\nimport { GET_NOTIFICATION, SET_CURRENT_USER } from './types'\n\n\n//Register User...\nexport const registerUser = (data, history) => dispatch => {\n    axios\n        .post('/api/users/register', data)\n        // push to login page after successful register\n        .then(res => history.push('/login'))\n        // dispatch notification incase of any errors\n        .catch(err => {\n            dispatch({\n                type: GET_NOTIFICATION,\n                payload: err.response\n            })\n        })\n}\n\n//Get login token ...\nexport const loginUser = userData => dispatch => {\n    axios.post('/api/users/login', userData)\n        .then(res => {\n            //Set token to local storage\n            const { token } = res.data\n            //Save to localstorage\n            localStorage.setItem('jwtToken', token)\n            setAuthToken(token)\n            //decode token\n            const decoded = jwt_decoded(token)\n\n            dispatch(setCurrentUser(decoded))\n\n        })\n        .catch(err => {\n            dispatch({\n                type: GET_NOTIFICATION,\n                payload: err.response\n            })\n        })\n}\n\n\n//Set logged in user \nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    }\n}\n\n\n//Log user out\nexport const logOutUser = () => dispatch => {\n    //remove toke from localstorage\n    localStorage.removeItem('jwtToken')\n    //remove auth header for future requests\n    setAuthToken(false)\n    //remove current user and set auth state to false\n    dispatch(setCurrentUser({}))\n}","export const SET_CURRENT_USER = 'SET_CURRENT_USER'\nexport const GET_NOTIFICATION = 'GET_NOTIFICATION'\nexport const CLEAR_NOTIFICATION = 'CLEAR_NOTIFICATION'\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { notification } from 'antd';\nimport { clearNotification } from '../../store/actions/notifAction';\n\nconst Notification = props => {\n\n    const [alert, setAlert] = useState({\n        message: null,\n        status: null\n    })\n\n    const clear = () => {\n        setAlert({\n            message: null,\n            status: null\n        })\n        props.clearNotification()\n    }\n\n    const openNotificationWithIcon = type => {\n        notification[type]({\n            message: type.toUpperCase(),\n            description: alert.message,\n            onClose: clear,\n            duration: 2\n        });\n    };\n\n    //Update alert\n    useEffect(() => {\n        setAlert({\n            message: props.message,\n            status: props.status\n        })\n    }, [props])\n\n    //Display notification once alert is updated\n    useEffect(() => {\n        if (alert.message) {\n            if (alert.status === 200) {\n                openNotificationWithIcon('success')\n            } else {\n                openNotificationWithIcon('error')\n            }\n        }\n        // eslint-disable-next-line\n    }, [alert])\n\n    return (\n        <div></div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        message: state.notification.message,\n        status: state.notification.status\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clearNotification: () => dispatch(clearNotification())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notification)\n","import { CLEAR_NOTIFICATION, GET_NOTIFICATION } from './types'\n\nexport const setNotification = action => {\n    return {\n        type: GET_NOTIFICATION,\n        payload: action\n    }\n}\n\nexport const clearNotification = () => {\n    return {\n        type: CLEAR_NOTIFICATION\n    }\n}","import React from 'react'\nimport { withRouter, Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { Menu, Icon, Typography } from 'antd'\nimport Notification from './Notification'\nimport { logOutUser } from '../../store/actions/authAction'\nimport logo from './thermometer.jpg'\nimport './Navbar.css'\n\nconst { Text } = Typography\nconst Navbar = props => {\n\n    const onLogOut = () => {\n        props.logOutUser()\n        props.history.push('/login')\n    }\n    return (\n        <div>\n            {\n                props.isAuthenticated ? (<Menu mode=\"horizontal\">\n                    <Menu.Item key=\"title\">\n                        <Link to='/'>\n                            <img src={logo} style={{ \"width\": \"35px\", \"height\": \"30px\" }} alt=\"logo\" />\n                            <Text strong>\n                                THERMOSTAT\n                        </Text>\n                        </Link>\n                    </Menu.Item>\n                    <Menu.Item key=\"logout\" style={{ float: 'right' }} onClick={onLogOut}>\n                        <Icon type=\"logout\" />\n                        Logout\n                    </Menu.Item>\n                </Menu>) : (null)\n            }\n\n            <Notification />\n\n        </div >\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthenticated: state.auth.isAuthenticated\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        logOutUser: () => dispatch(logOutUser())\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Navbar))\n","import React from 'react'\nimport { Typography } from 'antd'\nimport logo from '../common/thermometer.jpg'\n\n\nconst Logo = () => {\n    return (\n        <div>\n            <img src={logo} style={{ \"width\": \"50px\", \"height\": \"50px\" }} alt=\"logo\" />\n            <div><Typography.Title>THERMOSTAT</Typography.Title></div>\n        </div>\n    )\n}\n\nexport default Logo\n","import React, { useEffect } from 'react'\nimport { Form, Icon, Input, Button, Layout } from 'antd'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport \"./Login.css\"\nimport Logo from './Logo'\nimport { loginUser } from '../../store/actions/authAction'\n\n\nconst { Content } = Layout\nconst Login = props => {\n    useEffect(() => {\n        if (props.isAuthenticated) {\n            props.history.push('/')\n        }\n    }, [props])\n    const handleSubmit = e => {\n        e.preventDefault()\n        props.form.validateFields((err, loginDetails) => {\n            if (!err) {\n                props.loginUser(loginDetails)\n            }\n        })\n    }\n    const { getFieldDecorator } = props.form\n    return (\n        <Content>\n            <div className=\"logo\">\n                <Logo />\n            </div>\n            <div className=\"login-layout\">\n                <Form onSubmit={handleSubmit} className=\"login-form\">\n                    <Form.Item>\n                        {getFieldDecorator('email', {\n                            rules: [\n                                {\n                                    required: true,\n                                    message: 'Please input your email!'\n                                }],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                placeholder=\"Email\" />,\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        {getFieldDecorator('password', {\n                            rules: [{ required: true, message: 'Please input your Password!' }],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                type=\"password\"\n                                placeholder=\"Password\"\n                            />,\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        <div>\n                            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                                Log in\n                            </Button>\n                        </div>\n                        Or <Link className=\"nav-link\" to=\"/register\">\n                            Register now\n                            </Link>\n                    </Form.Item>\n                </Form>\n\n            </div>\n        </Content>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        loginUser: (loginDetails) => dispatch(loginUser(loginDetails))\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthenticated: state.auth.isAuthenticated\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(Login))","import React, { useEffect } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport './Login.css'\nimport { Form, Icon, Input, Button, Layout } from 'antd'\nimport { registerUser } from '../../store/actions/authAction'\nimport { connect } from 'react-redux'\nimport Logo from './Logo'\n\nconst { Content } = Layout\n\nconst Register = props => {\n\n    useEffect(() => {\n        if (props.isAuthenticated) {\n            props.history.push('/')\n        }\n    }, [props])\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        props.form.validateFields((err, newUser) => {\n            if (!err) {\n                props.registerUser(newUser, props.history)\n            }\n        })\n    }\n    const { getFieldDecorator } = props.form\n    return (\n        <Content>\n            <div className=\"logo\">\n                <Logo />\n            </div>\n            <div className=\"login-layout\">\n                <Form onSubmit={handleSubmit} className=\"register-form\">\n                    <Form.Item>\n                        {getFieldDecorator('name', {\n                            rules: [\n                                {\n                                    required: true,\n                                    message: 'Please input your Name!'\n                                }],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                placeholder=\"Name\" />,\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        {getFieldDecorator('email', {\n                            rules: [\n                                {\n                                    required: true,\n                                    message: 'Please input your email!'\n                                }],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                placeholder=\"Email\" />,\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        {getFieldDecorator('password', {\n                            rules: [\n                                {\n                                    required: true,\n                                    message: 'Please input your password!'\n                                }\n                            ],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                type=\"password\"\n                                placeholder=\"Password\" />,\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        {getFieldDecorator('password2', {\n                            rules: [{\n                                required: true,\n                                message: 'Please confirm your Password!',\n                            }]\n                        })(\n                            <Input\n                                prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                type=\"password\"\n                                placeholder=\"Confirm Password\" />,\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        <div>\n                            <Button type=\"primary\" htmlType=\"submit\" className=\"register-form-button\">\n                                Register\n                            </Button>\n                        </div>\n                        Already have an account? <Link className=\"nav-link\" to=\"/login\">\n                            Log In\n                            </Link>\n                    </Form.Item>\n                </Form>\n            </div>\n        </Content>\n    )\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        registerUser: (newUser, history) => dispatch(registerUser(newUser, history))\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthenticated: state.auth.isAuthenticated\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Form.create()(Register)))","import React, { useState, useEffect } from 'react'\nimport { List, Typography, Input } from 'antd'\nimport { Link } from 'react-router-dom'\nimport axios from 'axios'\n\nimport './Browser.css'\n\nconst Browser = () => {\n    const [items, setItems] = useState([])\n    const [search, setSearch] = useState('')\n    useEffect(() => {\n        axios.get('/api/readings')\n            .then(res => {\n                setItems(res.data)\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }, [])\n    let filteredItems = items.filter(item => {\n        return item.toLowerCase().indexOf(search) !== -1\n    })\n    return (\n\n        <div>\n            <div>\n                <Input type=\"text\" placeholder=\"Search...\" onChange={(e) => setSearch(e.target.value.toLowerCase())} />\n            </div>\n            <div className=\"file-list\">\n                <List\n                    bordered\n                    dataSource={filteredItems}\n                    renderItem={item => (\n                        <Link to={`details/${item}`}>\n                            <List.Item>\n                                <Typography.Text mark>{item.split('.')[1].toUpperCase()}</Typography.Text> {item}\n                            </List.Item>\n                        </Link>\n                    )}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default Browser\n","\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { Route, Redirect } from \"react-router-dom\"\n\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\n    <Route\n        {...rest}\n        render={props =>\n            auth.isAuthenticated === true ? (\n                <Component {...props} />\n            ) : (\n                    <Redirect to='/login' />\n                )}\n    />\n)\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n})\n\n\nexport default connect(mapStateToProps)(PrivateRoute)","import React, { useState, useEffect } from 'react'\nimport '../../../node_modules/react-vis/dist/style.css'\nimport {\n    XAxis,\n    YAxis,\n    HorizontalGridLines,\n    VerticalGridLines,\n    XYPlot,\n    Highlight,\n    MarkSeries,\n    Hint\n} from 'react-vis'\nimport axios from 'axios'\nimport { Button, Spin } from 'antd'\nimport { connect } from 'react-redux'\nimport { setNotification } from '../../store/actions/notifAction'\nimport './LineChart_zoom.css'\n\n\nconst LineChart_zoom = (props) => {\n    const [value, setValue] = useState(null)\n    const [state, setState] = useState([])\n    const { setNotification, fileName } = props\n    useEffect(() => {\n        axios.post('/api/readings',\n            { name: fileName })\n            .then(rec => {\n                setState(rec.data)\n            })\n            .catch(err => {\n                setNotification(err.response)\n            })\n    }, [fileName, setNotification])\n\n    const _rememberValue = value => {\n        setValue(value)\n    }\n\n    const _forgetValue = () => {\n        setValue(null)\n    }\n\n    const uploadFile = fileName => {\n        axios.post('/api/readings/upload', { name: fileName }).then(\n            res => {\n                setNotification(res)\n            }).catch(err => {\n                setNotification(err.response)\n            })\n    }\n    const [lastDrawLocation, setLastDrawLocation] = useState(null)\n    return (\n        <div>\n            {\n                state.length > 1 ? (\n                    <div>\n                        <XYPlot\n                            style={{ overflow: \"hidden\" }}\n                            animation\n                            xType='time'\n                            xDomain={\n                                lastDrawLocation && [\n                                    lastDrawLocation.left,\n                                    lastDrawLocation.right\n                                ]\n                            }\n                            yDomain={\n                                lastDrawLocation && [\n                                    lastDrawLocation.bottom,\n                                    lastDrawLocation.top\n                                ]\n                            }\n                            width={1200}\n                            height={300}>\n                            <HorizontalGridLines />\n                            <VerticalGridLines />\n                            <YAxis />\n                            <XAxis />\n                            <MarkSeries\n                                onValueMouseOver={(e) => _rememberValue(e)}\n                                onValueMouseOut={() => _forgetValue()}\n                                data={state} />\n\n                            <Highlight\n                                onBrushEnd={area => setLastDrawLocation(area)}\n                                onDrag={area => {\n                                    setLastDrawLocation({\n                                        bottom: lastDrawLocation.bottom + (area.top - area.bottom),\n                                        left: lastDrawLocation.left - (area.right - area.left),\n                                        right: lastDrawLocation.right - (area.right - area.left),\n                                        top: lastDrawLocation.top + (area.top - area.bottom)\n\n                                    })\n                                }}\n                            />\n                            {value ? <Hint value={value} /> : null}\n                        </XYPlot>\n                    </div>\n                ) : (\n                        <div className=\"spin-space\">\n                            <Spin size=\"large\" className=\"spin-position\" />\n                        </div>\n                    )\n            }\n            <Button\n                type=\"primary\"\n                style={{ float: 'left', margin: '10px' }}\n                onClick={() => setLastDrawLocation(null)}\n            >Reset Zoom\n            </Button>\n            <Button\n                type=\"default\"\n                icon=\"cloud-upload\"\n                style={{ float: 'left', margin: '10px' }}\n                onClick={() => uploadFile(props.fileName)}\n            >Upload\n            </Button>\n        </div>\n    )\n}\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setNotification: (payload) => dispatch(setNotification(payload))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(LineChart_zoom)","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { Layout } from 'antd'\nimport LineChart from '../graph/LineChart_zoom'\nimport './Details.css'\n\nconst { Content } = Layout\n\nconst Details = props => {\n    return (\n        <div>\n            <Content>\n                <div className=\"chart-boundaries\">\n                    <LineChart fileName={props.match.params.id} />\n                </div>\n            </Content>\n        </div>\n    )\n}\n\nexport default withRouter(Details)\n","import React, { useState, useEffect } from 'react'\nimport { Button, Icon, Badge, Popover, Alert } from 'antd'\nimport './AlertButton.css'\nimport { connect } from 'react-redux'\nimport socketIOClient from 'socket.io-client'\nimport { ENDPOINT } from '../../config'\nimport axios from 'axios'\nimport * as _ from 'underscore'\n\nconst AlertList = (props) => {\n    const [messages, setMessages] = useState([])\n\n    useEffect(() => {\n        if (props.isAuthenticated) {\n            axios.get(\"/api/alerts\").then(messages => {\n                setMessages(messages.data.reverse())\n            }).catch(err => {\n                console.log(err.response)\n            })\n            const socket = socketIOClient(ENDPOINT)\n            socket.on(\"test\", data => {\n                setMessages(messages => [data.msg, ...messages])\n            })\n        }\n    }, [props])\n\n    const handleVisibleChange = visible => {\n        if (messages.length === 0) return null\n        if (visible === false) {\n            const idArray = []\n            messages.forEach(message => {\n                idArray.push(message._id)\n            })\n            axios.post(\"/api/alerts/update\",\n                {\n                    replace: { read: true },\n                    idArray: idArray\n                }).then(() => {\n                    setMessages([])\n                }).catch(err => {\n                    console.log(err.response)\n                })\n        }\n    }\n\n    return (props.isAuthenticated ? (\n        <Popover\n            className=\"popover\"\n            content={\n                messages.map(c => {\n                    return (<Alert key={c._id} message={c.message} type={c.status} banner showIcon />)\n                })\n            }\n            onVisibleChange={_.debounce(handleVisibleChange, 500)}\n            title={<span>Messages</span>}\n        >\n            <Badge count={messages.length} className=\"alert-badge\">\n                <Button className=\"alert-button\" type=\"primary\" shape=\"circle\" size=\"large\" >\n                    <Icon className=\"alert-icon\" type=\"bell\" />\n                </Button>\n            </Badge>\n        </Popover>\n\n    ) : (null)\n\n    )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        isAuthenticated: state.auth.isAuthenticated\n    }\n}\n\nexport default connect(mapStateToProps)(AlertList)\n","export const ENDPOINT = \"http://localhost:5000\"","import React, { useEffect } from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport jwt_decoded from 'jwt-decode'\nimport setAuthToken from '../src/utils/setAuthToken'\nimport { connect } from 'react-redux'\nimport { setCurrentUser, logOutUser } from './store/actions/authAction'\n\nimport Navbar from './components/common/Navbar'\nimport Login from './components/auth/Login'\nimport Register from './components/auth/Register'\nimport Browser from './components/files/Browser'\nimport PrivateRoute from './components/validators/PrivateRoute'\nimport Details from './components/files/Details'\nimport AlertList from './components/common/AlertList'\n\nconst initialVerfication = (props) => {\n  // Check loacl storage for bearer token\n  if (localStorage.jwtToken) {\n    //set bearer token to all axios headers\n    setAuthToken(localStorage.jwtToken)\n    const decoded = jwt_decoded(localStorage.jwtToken)\n    //decode token and set user params in Redux\n    props.setCurrentUser(decoded)\n    const currentTime = Date.now() / 1000\n    //if token time is less than current time then logout user and redirect time to login page\n    if (decoded.exp < currentTime) {\n      props.logOutUser()\n      props.history.push('/')\n    }\n  }\n}\n\n\nfunction App(props) {\n\n  // Run each time props changes\n  useEffect(() => {\n    initialVerfication(props)\n  }, [props])\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Navbar />\n        <Route path='/login' component={Login} />\n        <Route path='/register' component={Register} />\n        <Switch>\n          <PrivateRoute exact path=\"/\" component={Browser} />\n        </Switch>\n        <Switch>\n          <PrivateRoute exact path=\"/details/:id\" component={Details} />\n        </Switch>\n        <AlertList />\n      </div>\n    </BrowserRouter >\n  )\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setCurrentUser: (jwtToken) => dispatch(setCurrentUser(jwtToken)),\n    logOutUser: () => dispatch(logOutUser())\n  }\n}\n\n\nexport default connect(null, mapDispatchToProps)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","const isEmpty = value =>\n    value === undefined ||\n    value === null ||\n    (typeof value === 'object' && Object.keys(value).length === 0) ||\n    (typeof value === 'string' && value.trim().length === 0)\n\nexport default isEmpty","import { SET_CURRENT_USER } from '../actions/types'\nimport isEmpty from '../../validations/isEmpty'\n\n/*Set initial state */\nconst initialState = {\n    isAuthenticated: false,\n    user: {},\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                isAuthenticated: !isEmpty(action.payload),\n                user: action.payload\n            }\n        default:\n            return state\n    }\n}\n\nexport default authReducer\n","import { GET_NOTIFICATION, CLEAR_NOTIFICATION } from '../actions/types';\n\nconst initialState = {\n    message: '',\n    status: 200,\n};\n\nexport default function (state = initialState, action) {\n    const { payload } = action\n    switch (action.type) {\n        case GET_NOTIFICATION:\n            return {\n                message: payload.data,\n                status: payload.status,\n            };\n        case CLEAR_NOTIFICATION:\n            return {\n                message: null,\n                status: null,\n            };\n        default:\n            return state;\n    }\n}","import authReducer from './authReducer'\nimport notifReducer from './notifReducer'\nimport { combineReducers } from 'redux'\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    notification: notifReducer\n})\n\nexport default rootReducer","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './store/reducer/rootReducer'\nimport thunk from 'redux-thunk'\n\nconst store = createStore(\n    rootReducer,\n    compose(\n        applyMiddleware(thunk),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n)\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}